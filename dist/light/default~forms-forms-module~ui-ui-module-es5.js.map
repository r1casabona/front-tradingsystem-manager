{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slider.js"],"names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ctx_r0","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteActivatedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocompleteDefaultOptions","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_autoActiveFirstOption","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","nativeElement","length","_setVisibilityClasses","markForCheck","event","classList","value","split","reduce","className","trim","ɵfac","MatAutocomplete_Factory","t","ɵcmp","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","_t","optionGroups","viewQuery","MatAutocomplete_Query","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","directives","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","descendants","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","map","onSelectionChange","onStable","asObservable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","_isInsideShadowRoot","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","clickTarget","composedPath","target","formField","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","activeItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","activeItemIndex","labelCount","_setScrollTop","newScrollPosition","_getScrollTop","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","overlayRef","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","panelClass","abovePositions","positions","withPositions","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","_a","defaultView","tabOut","_getOutsideClickStream","detachments","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","autocompleteDisabled","toString","MatAutocompleteModule","ɵmod","ɵinj","MatAutocompleteModule_Factory","imports","ngJitMode","declarations","exports","nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_ngZone","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","size","_id","nodeType","ELEMENT_NODE","indexOf","contentChange","currentValue","_updateTextContent","badgeElement","_badgeElement","description","removeDescription","destroyNode","_createBadgeElement","textContent","content","createElement","activeClass","contentClass","_clearExistingBadges","setAttribute","add","appendChild","requestAnimationFrame","newDescription","oldDescription","describe","colorPalette","remove","cssClass","childCount","children","currentChild","removeChild","_setColor","val","_description","_updateHostAriaDescription","removeAttribute","_hidden","MatBadge_Factory","MatBadge_HostBindings","overlap","isAbove","isAfter","hidden","color","String","MatBadgeModule","MatBadgeModule_Factory","MatChipEvent","MatChipSelectionChange","isUserInput","MatChipBase","_MatChipMixinBase","MatChipAvatar","MatChipAvatar_Factory","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","platform","globalRippleOptions","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","document","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","basicChipAttrName","hasAttribute","tagName","toLowerCase","chip","_removeTriggerEvents","_dispatchSelectionChange","_markForCheck","removable","selectable","toggleSelected","run","coercedValue","_value","MatChip_Factory","MatChip_ContentQueries","MatChipRemove","avatar","trailingIcon","removeIcon","MatChip_HostBindings","MatChip_click_HostBindingHandler","_handleClick","MatChip_keydown_HostBindingHandler","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ariaSelected","_parentChip","nodeName","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MatChipsDefaultOptions","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","valueChange","valueAccessor","chips","withVerticalOrientation","withHorizontalOrientation","dir","_allowFocusEscape","_syncChipsState","_resetChips","_initializeSelection","_updateTabIndex","_updateFocusForDestroyedChips","stateChanges","_selectionModel","multiple","updateErrorState","_dropSubscriptions","inputElement","_chipInput","ids","_ariaDescribedby","join","_setSelectionByValue","_originatesFromChip","focused","setFirstItemActive","_focusInput","_isInputEmpty","setLastItemActive","newChipIndex","Math","min","input","_clearSelection","Array","isArray","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","clear","fallbackValue","valueToEmit","_hasFocusedChip","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","empty","writeValue","placeholder","_placeholder","MatChipList_Factory","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","role","required","errorState","compareWith","errorStateMatcher","MatChipList_Template","MatChipInputEvent","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","_emitChipEnd","addOnBlur","_isSeparatorKey","separators","has","registerInput","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","useValue","MatProgressSpinner__svg_circle_1_Template","diameter","_strokeDashOffset","_strokeCircumference","_circleStrokeWidth","_circleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MatProgressSpinnerDefaultOptions","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","_diameter","_fallbackAnimation","mode","trackedDiameters","_diameters","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","_styleRoot","_attachStyleNode","animationClass","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","_getAnimationText","replace","_strokeWidth","newValue","max","viewBox","PI","MatProgressSpinner_Factory","MatProgressSpinner_HostBindings","MatProgressSpinner_Template","_viewBox","WeakMap","MatSpinner","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","activeEventOptions","passive","MIN_AUTO_TICK_SEPARATION","DISABLED_THUMB_GAP","MIN_VALUE_NONACTIVE_THUMB_GAP","MIN_VALUE_ACTIVE_THUMB_GAP","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_focusMonitor","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_vertical","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_pointerDown","isTouchEvent","button","_runInsideZone","oldValue","pointerPosition","getPointerPositionOnPage","_lastPointerEvent","_focusHostElement","_onMouseenter","_bindGlobalEvents","_updateValueFromPosition","_valueOnSlideStart","_pointerPositionOnStart","_emitInputEvent","_emitChangeEvent","_pointerMove","_pointerUp","pointerPositionOnStart","currentPointerPosition","_removeGlobalEvents","x","y","_windowBlur","_runOutsizeZone","_blurHostElement","_getDirection","vertical","_invertAxis","monitor","origin","stopMonitoring","_getSliderDimensions","_updateTickIntervalPercent","_increment","triggerEvent","isTouch","moveEventName","endEventName","numSteps","_clamp","step","pos","offset","top","left","height","posComponent","percent","_shouldInvertMouseCoords","exactValue","_calculateValue","closestValue","round","_createChangeEvent","tickInterval","trackSize","pixelsPerStep","stepsPerTick","ceil","pixelsPerTick","percentage","_sliderWrapper","blur","v","_calculatePercentage","_roundToDecimal","pop","toFixed","invert","_isMinValue","thumbLabel","axis","scale","sign","transform","_thumbGap","display","tickSize","backgroundSize","rotate","side","invertOffset","MatSlider_Factory","MatSlider_Query","MatSlider_HostBindings","MatSlider_focus_HostBindingHandler","MatSlider_blur_HostBindingHandler","MatSlider_keydown_HostBindingHandler","_onKeydown","MatSlider_keyup_HostBindingHandler","_onKeyup","MatSlider_mouseenter_HostBindingHandler","MatSlider_selectstart_HostBindingHandler","MatSlider_Template","_trackBackgroundStyles","_trackFillStyles","_ticksContainerStyles","_ticksStyles","_thumbContainerStyles","displayValue","point","touches","changedTouches","clientX","clientY","MatSliderModule","MatSliderModule_Factory"],"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","file":"default~forms-forms-module~ui-ui-module-es5.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.option;\n}\n/**\n * Event object that is emitted when an autocomplete option is activated.\n * @record\n */\nfunction MatAutocompleteActivatedEvent() { }\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.option;\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Default `mat-autocomplete` options that can be overridden.\n * @record\n */\nfunction MatAutocompleteDefaultOptions() { }\nif (false) {\n    /**\n     * Whether the first option should be highlighted when an autocomplete panel is opened.\n     * @type {?|undefined}\n     */\n    MatAutocompleteDefaultOptions.prototype.autoActiveFirstOption;\n}\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Emits whenever an option is activated using the keyboard.\n         */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        }));\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_autoActiveFirstOption;\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._activeOptionChanges;\n    /**\n     * Manages active item in option list based on key events.\n     * @type {?}\n     */\n    MatAutocomplete.prototype._keyManager;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.showPanel;\n    /** @type {?} */\n    MatAutocomplete.prototype._isOpen;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.template;\n    /**\n     * Element for the panel containing the autocomplete options.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panel;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.options;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionGroups;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panelWidth;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionSelected;\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.opened;\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.closed;\n    /**\n     * Emits whenever an option is activated using the keyboard.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionActivated;\n    /** @type {?} */\n    MatAutocomplete.prototype._classList;\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-origin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    MatAutocompleteOrigin.prototype.elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        /** @type {?} */\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        /** @type {?} */\n        const panelClass = 'mat-autocomplete-panel-above';\n        /** @type {?} */\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocompleteTrigger.ngAcceptInputType_autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._componentDestroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._scrollStrategy;\n    /**\n     * Old value of the native input. Used to work around issues with the `input` event on IE.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._previousValue;\n    /**\n     * Strategy that is used to position the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._positionStrategy;\n    /**\n     * Whether or not the label state is being overridden.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._manuallyFloatingLabel;\n    /**\n     * The subscription for closing actions (some are bound to document).\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closingActionsSubscription;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._canOpenOnNextFocus;\n    /**\n     * Whether the element is inside of a ShadowRoot component.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._isInsideShadowRoot;\n    /**\n     * Stream of keyboard events that can close the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._windowBlurHandler;\n    /**\n     * `View -> model callback called when value changes`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onChange;\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onTouched;\n    /**\n     * The autocomplete panel to be attached to this trigger.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.position;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocompleteAttribute;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayAttached;\n    /**\n     * Stream of autocomplete option selections.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.optionSelections;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._formField;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete,\n        MatOptionModule,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map","import { isDevMode, Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/badge/badge.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?} _renderer\n     * @param {?=} _animationMode\n     */\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n        if (isDevMode()) {\n            /** @type {?} */\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            /** @type {?} */\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const contentChange = changes['content'];\n        if (contentChange) {\n            /** @type {?} */\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     * @return {?}\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @private\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @private\n     * @return {?}\n     */\n    _createBadgeElement() {\n        /** @type {?} */\n        const badgeElement = this._renderer.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        /** @type {?} */\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this.content;\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    badgeElement.classList.add(activeClass);\n                }));\n            }));\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @private\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @private\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /**\n     * Clears any existing badges that might be left over from server-side rendering.\n     * @private\n     * @param {?} cssClass\n     * @return {?}\n     */\n    _clearExistingBadges(cssClass) {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            /** @type {?} */\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatBadge.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatBadge.ngAcceptInputType_hidden;\n    /** @type {?} */\n    MatBadge.ngAcceptInputType_overlap;\n    /**\n     * Whether the badge has any content.\n     * @type {?}\n     */\n    MatBadge.prototype._hasContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._color;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     * @type {?}\n     */\n    MatBadge.prototype.position;\n    /**\n     * The content for the badge\n     * @type {?}\n     */\n    MatBadge.prototype.content;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._description;\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     * @type {?}\n     */\n    MatBadge.prototype.size;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._hidden;\n    /**\n     * Unique id for the badge\n     * @type {?}\n     */\n    MatBadge.prototype._id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._badgeElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._ariaDescriber;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/badge/badge-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); }, imports: [[\n            A11yModule,\n            MatCommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/badge/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nfunction MatChipEvent() { }\nif (false) {\n    /**\n     * The chip the event was fired on.\n     * @type {?}\n     */\n    MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\nif (false) {\n    /**\n     * Reference to the chip that emitted the event.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.source;\n    /**\n     * Whether the chip that emitted the event is selected.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.selected;\n    /**\n     * Whether the selection change was a result of a user interaction.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.isUserInput;\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     * @param {?=} tabIndex\n     * @param {?=} _document\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef, tabIndex, \n    // @breaking-change 11.0.0 `_document` parameter to become required.\n    _document) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = (_document || document).createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatChipRemove))]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selectable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_removable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disableRipple;\n    /**\n     * Reference to the RippleRenderer for the chip.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRipple;\n    /**\n     * Reference to the element that acts as the chip's ripple target. This element is\n     * dynamically added as a child node of the chip. The chip itself cannot be used as the\n     * ripple target because it must be the host of the focus indicator.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRippleTarget;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the chip ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChip.prototype.rippleConfig;\n    /**\n     * Whether the chip has focus.\n     * @type {?}\n     */\n    MatChip.prototype._hasFocus;\n    /**\n     * Whether animations for the chip are enabled.\n     * @type {?}\n     */\n    MatChip.prototype._animationsDisabled;\n    /**\n     * Whether the chip list is selectable\n     * @type {?}\n     */\n    MatChip.prototype.chipListSelectable;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     * @type {?}\n     */\n    MatChip.prototype._chipListMultiple;\n    /**\n     * The chip avatar\n     * @type {?}\n     */\n    MatChip.prototype.avatar;\n    /**\n     * The chip's trailing icon.\n     * @type {?}\n     */\n    MatChip.prototype.trailingIcon;\n    /**\n     * The chip's remove toggler.\n     * @type {?}\n     */\n    MatChip.prototype.removeIcon;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selected;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selectable;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._removable;\n    /**\n     * Emits when the chip is focused.\n     * @type {?}\n     */\n    MatChip.prototype._onFocus;\n    /**\n     * Emits when the chip is blured.\n     * @type {?}\n     */\n    MatChip.prototype._onBlur;\n    /**\n     * Emitted when the chip is selected or deselected.\n     * @type {?}\n     */\n    MatChip.prototype.selectionChange;\n    /**\n     * Emitted when the chip is destroyed.\n     * @type {?}\n     */\n    MatChip.prototype.destroyed;\n    /**\n     * Emitted when a chip is to be removed.\n     * @type {?}\n     */\n    MatChip.prototype.removed;\n    /** @type {?} */\n    MatChip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     * @param {?=} elementRef\n     */\n    constructor(_parentChip, \n    // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n    elementRef) {\n        this._parentChip = _parentChip;\n        // @breaking-change 11.0.0 Remove null check for `elementRef`.\n        if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                }\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipRemove.prototype._parentChip;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\nfunction MatChipsDefaultOptions() { }\nif (false) {\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     * @type {?}\n     */\n    MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipListBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatChipListBase.prototype._parentForm;\n    /** @type {?} */\n    MatChipListBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * Chip list that emitted the event.\n     * @type {?}\n     */\n    MatChipListChange.prototype.source;\n    /**\n     * Value of the chip list when the event was emitted.\n     * @type {?}\n     */\n    MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_required;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_selectable;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.controlType;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._lastDestroyedChipIndex;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._destroyed;\n    /**\n     * Subscription to focus changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipFocusSubscription;\n    /**\n     * Subscription to blur changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipBlurSubscription;\n    /**\n     * Subscription to selection changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipSelectionSubscription;\n    /**\n     * Subscription to remove changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipRemoveSubscription;\n    /**\n     * The chip input to add more chips\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._chipInput;\n    /**\n     * Uid of the chip list\n     * @type {?}\n     */\n    MatChipList.prototype._uid;\n    /**\n     * The aria-describedby attribute on the chip list for improved a11y.\n     * @type {?}\n     */\n    MatChipList.prototype._ariaDescribedby;\n    /**\n     * Tab index for the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype._tabIndex;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     * @type {?}\n     */\n    MatChipList.prototype._userTabIndex;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatChipList.prototype._keyManager;\n    /**\n     * Function when touched\n     * @type {?}\n     */\n    MatChipList.prototype._onTouched;\n    /**\n     * Function when changed\n     * @type {?}\n     */\n    MatChipList.prototype._onChange;\n    /** @type {?} */\n    MatChipList.prototype._selectionModel;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatChipList.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._compareWith;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._disabled;\n    /**\n     * Orientation of the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.ariaOrientation;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._selectable;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     * @type {?}\n     */\n    MatChipList.prototype.change;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.valueChange;\n    /**\n     * The chip components contained within this chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.chips;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._dir;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.ngControl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\nfunction MatChipInputEvent() { }\nif (false) {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.input;\n    /**\n     * The value of the input.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.value;\n}\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_addOnBlur;\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_disabled;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatChipInput.prototype.focused;\n    /** @type {?} */\n    MatChipInput.prototype._chipList;\n    /** @type {?} */\n    MatChipInput.prototype._addOnBlur;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     * @type {?}\n     */\n    MatChipInput.prototype.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     * @type {?}\n     */\n    MatChipInput.prototype.chipEnd;\n    /**\n     * The input's placeholder text.\n     * @type {?}\n     */\n    MatChipInput.prototype.placeholder;\n    /**\n     * Unique id for the input.\n     * @type {?}\n     */\n    MatChipInput.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._disabled;\n    /**\n     * The native input element to which this directive is attached.\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._defaultOptions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ( /** @type {?} */(ɵ0))\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon], exports: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ( /** @type {?} */(ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n\n//# sourceMappingURL=chips.js.map","import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-spinner/progress-spinner.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatProgressSpinnerBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Default `mat-progress-spinner` options that can be overridden.\n * @record\n */\nfunction MatProgressSpinnerDefaultOptions() { }\nif (false) {\n    /**\n     * Diameter of the spinner.\n     * @type {?|undefined}\n     */\n    MatProgressSpinnerDefaultOptions.prototype.diameter;\n    /**\n     * Width of the spinner's stroke.\n     * @type {?|undefined}\n     */\n    MatProgressSpinnerDefaultOptions.prototype.strokeWidth;\n    /**\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\n     * using NoopAnimationsModule.\n     * @type {?|undefined}\n     */\n    MatProgressSpinnerDefaultOptions.prototype._forceAnimations;\n}\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n * @type {?}\n */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\n/** @type {?} */\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     * @param {?} animationMode\n     * @param {?=} defaults\n     */\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /**\n         * Mode of the progress circle\n         */\n        this.mode = 'determinate';\n        /** @type {?} */\n        const trackedDiameters = MatProgressSpinner._diameters;\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n    get diameter() { return this._diameter; }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        /** @type {?} */\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n    get _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n    get _viewBox() {\n        /** @type {?} */\n        const viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._strokeCircumference * 0.2;\n        }\n        return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n    get _circleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @private\n     * @return {?}\n     */\n    _attachStyleNode() {\n        /** @type {?} */\n        const styleRoot = this._styleRoot;\n        /** @type {?} */\n        const currentDiameter = this._diameter;\n        /** @type {?} */\n        const diameters = MatProgressSpinner._diameters;\n        /** @type {?} */\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            /** @type {?} */\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @private\n     * @return {?}\n     */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\n/** @nocollapse */\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n     * We need to keep track of which elements the diameters were attached to, because for\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n     * than the document head.\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner._diameters;\n    /** @type {?} */\n    MatProgressSpinner.ngAcceptInputType_diameter;\n    /** @type {?} */\n    MatProgressSpinner.ngAcceptInputType_strokeWidth;\n    /** @type {?} */\n    MatProgressSpinner.ngAcceptInputType_value;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._diameter;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._strokeWidth;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._fallbackAnimation;\n    /**\n     * Element to which we should add the generated style tags for the indeterminate animation.\n     * For most elements this is the document, but for the ones in the Shadow DOM we need to\n     * use the shadow root.\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._styleRoot;\n    /**\n     * Whether the _mat-animation-noopable class should be applied, disabling animations.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype._noopAnimations;\n    /**\n     * Mode of the progress circle\n     * @type {?}\n     */\n    MatProgressSpinner.prototype.mode;\n    /** @type {?} */\n    MatProgressSpinner.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._document;\n}\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     * @param {?} animationMode\n     * @param {?=} defaults\n     */\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-spinner/progress-spinner-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); }, imports: [[MatCommonModule, CommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner,\n        MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner,\n        MatSpinner,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-spinner/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, Inject, NgZone, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/slider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n * @type {?}\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n * @type {?}\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n * @type {?}\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n * @type {?}\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlider)),\n    multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\nclass MatSliderChange {\n}\nif (false) {\n    /**\n     * The MatSlider that changed.\n     * @type {?}\n     */\n    MatSliderChange.prototype.source;\n    /**\n     * The new value of the source slider.\n     * @type {?}\n     */\n    MatSliderChange.prototype.value;\n}\n// Boilerplate for applying mixins to MatSlider.\n/**\n * \\@docs-private\n */\nclass MatSliderBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSliderBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} tabIndex\n     * @param {?=} _animationMode\n     * @param {?=} _ngZone\n     * @param {?=} document\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._animationMode = _animationMode;\n        this._ngZone = _ngZone;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /**\n         * Event emitted when the slider value has changed.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the slider thumb moves.\n         */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /**\n         * The size of a tick interval as a percentage of the size of the track.\n         */\n        this._tickIntervalPercent = 0;\n        /**\n         * The dimensions of the slider.\n         */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Subscription to the Directionality change EventEmitter.\n         */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /**\n         * Called when the user has put their pointer down on the slider.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._runInsideZone((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const oldValue = this.value;\n                /** @type {?} */\n                const pointerPosition = getPointerPositionOnPage(event);\n                this._isSliding = true;\n                this._lastPointerEvent = event;\n                event.preventDefault();\n                this._focusHostElement();\n                this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                this._bindGlobalEvents(event);\n                this._focusHostElement();\n                this._updateValueFromPosition(pointerPosition);\n                this._valueOnSlideStart = this.value;\n                this._pointerPositionOnStart = pointerPosition;\n                // Emit a change and input event if the value changed.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                    this._emitChangeEvent();\n                }\n            }));\n        });\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._isSliding) {\n                // Prevent the slide from selecting anything else.\n                event.preventDefault();\n                /** @type {?} */\n                const oldValue = this.value;\n                this._lastPointerEvent = event;\n                this._updateValueFromPosition(getPointerPositionOnPage(event));\n                // Native range elements always emit `input` events when the value changed while sliding.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                }\n            }\n        });\n        /**\n         * Called when the user has lifted their pointer. Bound on the document level.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._isSliding) {\n                /** @type {?} */\n                const pointerPositionOnStart = this._pointerPositionOnStart;\n                /** @type {?} */\n                const currentPointerPosition = getPointerPositionOnPage(event);\n                event.preventDefault();\n                this._removeGlobalEvents();\n                this._valueOnSlideStart = this._pointerPositionOnStart = this._lastPointerEvent = null;\n                this._isSliding = false;\n                if (this._valueOnSlideStart != this.value && !this.disabled &&\n                    pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n                    pointerPositionOnStart.y !== currentPointerPosition.y)) {\n                    this._emitChangeEvent();\n                }\n            }\n        });\n        /**\n         * Called when the window has lost focus.\n         */\n        this._windowBlur = (/**\n         * @return {?}\n         */\n        () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        });\n        this._document = document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._runOutsizeZone((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        }));\n    }\n    /**\n     * Whether the slider is inverted.\n     * @return {?}\n     */\n    get invert() { return this._invert; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /**\n     * The maximum value that the slider can have.\n     * @return {?}\n     */\n    get max() { return this._max; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The minimum value that the slider can have.\n     * @return {?}\n     */\n    get min() { return this._min; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        // If the value wasn't explicitly set by the user, set it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The values at which the thumb will snap.\n     * @return {?}\n     */\n    get step() { return this._step; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = (/** @type {?} */ (this._step.toString().split('.').pop())).length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether or not to show the thumb label.\n     * @return {?}\n     */\n    get thumbLabel() { return this._thumbLabel; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     * @return {?}\n     */\n    get tickInterval() { return this._tickInterval; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, (/** @type {?} */ (this._tickInterval)));\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /**\n     * Value of the slider.\n     * @return {?}\n     */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        if (v !== this._value) {\n            /** @type {?} */\n            let value = coerceNumberProperty(v);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the slider is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * The value to be used for display purposes.\n     * @return {?}\n     */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith((/** @type {?} */ (this.value)));\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /**\n     * set focus to the host element\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /**\n     * blur the host element\n     * @return {?}\n     */\n    blur() {\n        this._blurHostElement();\n    }\n    /**\n     * The percentage of the slider that coincides with the value.\n     * @return {?}\n     */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     * @return {?}\n     */\n    get _invertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /**\n     * Whether the slider is at its minimum value.\n     * @return {?}\n     */\n    get _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     * @return {?}\n     */\n    get _thumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /**\n     * CSS styles for the track background element.\n     * @return {?}\n     */\n    get _trackBackgroundStyles() {\n        /** @type {?} */\n        const axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        /** @type {?} */\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n        };\n    }\n    /**\n     * CSS styles for the track fill element.\n     * @return {?}\n     */\n    get _trackFillStyles() {\n        /** @type {?} */\n        const percent = this.percent;\n        /** @type {?} */\n        const axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        /** @type {?} */\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : ''\n        };\n    }\n    /**\n     * CSS styles for the ticks container element.\n     * @return {?}\n     */\n    get _ticksContainerStyles() {\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        /** @type {?} */\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        /** @type {?} */\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /**\n     * CSS styles for the ticks element.\n     * @return {?}\n     */\n    get _ticksStyles() {\n        /** @type {?} */\n        let tickSize = this._tickIntervalPercent * 100;\n        /** @type {?} */\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        /** @type {?} */\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        /** @type {?} */\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        /** @type {?} */\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue && this._thumbGap) {\n            /** @type {?} */\n            let side;\n            if (this.vertical) {\n                side = this._invertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = this._invertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._thumbGap}px`;\n        }\n        return styles;\n    }\n    /**\n     * @return {?}\n     */\n    get _thumbContainerStyles() {\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        /** @type {?} */\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        /** @type {?} */\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     * @return {?}\n     */\n    _shouldInvertMouseCoords() {\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    }\n    /**\n     * The language direction for this slider element.\n     * @private\n     * @return {?}\n     */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        (origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        }));\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n    _onBlur() {\n        this.onTouched();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        /** @type {?} */\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    _onKeyup() {\n        this._isSliding = false;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     * @private\n     * @param {?} triggerEvent\n     * @return {?}\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        /** @type {?} */\n        const document = this._document;\n        if (typeof document !== 'undefined' && document) {\n            /** @type {?} */\n            const isTouch = isTouchEvent(triggerEvent);\n            /** @type {?} */\n            const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const endEventName = isTouch ? 'touchend' : 'mouseup';\n            document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n            document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n            if (isTouch) {\n                document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            }\n        }\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /**\n     * Removes any global event listeners that we may have added.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalEvents() {\n        /** @type {?} */\n        const document = this._document;\n        if (typeof document !== 'undefined' && document) {\n            document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @private\n     * @param {?} numSteps\n     * @return {?}\n     */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @private\n     * @param {?} pos\n     * @return {?}\n     */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        /** @type {?} */\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        /** @type {?} */\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        /** @type {?} */\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        /** @type {?} */\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            /** @type {?} */\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            /** @type {?} */\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @private\n     * @return {?}\n     */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            /** @type {?} */\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            /** @type {?} */\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            /** @type {?} */\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            /** @type {?} */\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /**\n     * Creates a slider change object from the specified value.\n     * @private\n     * @param {?=} value\n     * @return {?}\n     */\n    _createChangeEvent(value = this.value) {\n        /** @type {?} */\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @private\n     * @param {?} percentage\n     * @return {?}\n     */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /**\n     * Return a number between two numbers.\n     * @private\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @private\n     * @return {?}\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Blurs the native element.\n     * @private\n     * @return {?}\n     */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Runs a callback inside of the NgZone, if possible.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _runInsideZone(fn) {\n        // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n        this._ngZone ? this._ngZone.run(fn) : fn();\n    }\n    /**\n     * Runs a callback outside of the NgZone, if possible.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _runOutsizeZone(fn) {\n        // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n        this._ngZone ? this._ngZone.runOutsideAngular(fn) : fn();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 28, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", value: \"value\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", vertical: \"vertical\", displayWith: \"displayWith\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_invert;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_max;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_min;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_step;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_thumbLabel;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_tickInterval;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_value;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._invert;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._max;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._min;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._step;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._thumbLabel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._tickInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._value;\n    /**\n     * Function that will be used to format the value before it is displayed\n     * in the thumb label. Can be used to format very large number in order\n     * for them to fit into the slider thumb.\n     * @type {?}\n     */\n    MatSlider.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._vertical;\n    /**\n     * Event emitted when the slider value has changed.\n     * @type {?}\n     */\n    MatSlider.prototype.change;\n    /**\n     * Event emitted when the slider thumb moves.\n     * @type {?}\n     */\n    MatSlider.prototype.input;\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatSlider.prototype.valueChange;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @type {?}\n     */\n    MatSlider.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._percent;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     * @type {?}\n     */\n    MatSlider.prototype._isSliding;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     * @type {?}\n     */\n    MatSlider.prototype._isActive;\n    /**\n     * The size of a tick interval as a percentage of the size of the track.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._tickIntervalPercent;\n    /**\n     * The dimensions of the slider.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._sliderDimensions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._controlValueAccessorChangeFn;\n    /**\n     * Decimal places to round to, based on the step amount.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._roundToDecimal;\n    /**\n     * Subscription to the Directionality change EventEmitter.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._dirChangeSubscription;\n    /**\n     * The value of the slider when the slide start event fires.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._valueOnSlideStart;\n    /**\n     * Position of the pointer when the dragging started.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerPositionOnStart;\n    /**\n     * Reference to the inner slider wrapper element.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._sliderWrapper;\n    /**\n     * Keeps track of the last pointer event that was captured by the slider.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._lastPointerEvent;\n    /**\n     * Used to subscribe to global move and end events\n     * @type {?}\n     * @protected\n     */\n    MatSlider.prototype._document;\n    /**\n     * Called when the user has put their pointer down on the slider.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerDown;\n    /**\n     * Called when the user has moved their pointer after\n     * starting to drag. Bound on the document level.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerMove;\n    /**\n     * Called when the user has lifted their pointer. Bound on the document level.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerUp;\n    /**\n     * Called when the window has lost focus.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._windowBlur;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._dir;\n    /** @type {?} */\n    MatSlider.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._ngZone;\n}\n/**\n * Returns whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the coordinates of a touch or mouse event relative to the viewport.\n * @param {?} event\n * @return {?}\n */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    /** @type {?} */\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/slider-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); }, imports: [[CommonModule, MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n//# sourceMappingURL=slider.js.map"]}